#
# Copyright 1999-2025 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Common messages
nacos.api.auth.description=Get `accessToken` by `login` API.

# Client OpenAPI basic information
nacos.client.api.title=Nacos HTTP Client API
nacos.client.api.description=Nacos HTTP Client API openAPI(swagger) type documentï¼Œused for some program languages that no support grpc feature to develop Nacos client.

# InstanceOpenApiController
nacos.client.naming.instance.api.controller.name=Nacos Naming HTTP Client APIs
nacos.client.naming.instance.api.controller.description=**HTTP Client APIs for Nacos Naming, used for service instance registration, deregistration, and querying instance lists. Note:** In Nacos 3.X, the HTTP Client APIs do `NOT` provide interfaces to retrieve all service names or other system-wide operations. `Ordinary applications`, `microservices`, and `non-management/non-gateway applications` **should only require** registering themselves as an instance of a specific service, deregistering an instance, or fetching instance lists of known downstream services for direct business calls. **They should NOT need** to retrieve all services in the registry. To obtain the full service list, use the **Admin APIs**.
nacos.client.naming.instance.api.register.summary=Register/Heartbeat an instance
nacos.client.naming.instance.api.register.description=Registers or renews an instance in a specified service. **Note:** When using the HTTP Client API to register an ephemeral instance, periodic heartbeat renewal is required. In Nacos 3.X, the heartbeat API is merged with registration. The `heartBeat` parameter distinguishes between registration and heartbeat requests. During heartbeats, the server ignores parameters like `healthy`, `weight`, `enabled`, and `metadata`. If a heartbeat response returns error code `21003`, the instance has been expired and removed. The client should re-register with full metadata (setting `heartBeat=false`) before retrying heartbeat. While repeated registration can also renew the instance, this consumes more resources; prefer heartbeating after a successful initial registration for performance efficiency.
nacos.client.naming.instance.api.deregister.summary=Deregister an instance
nacos.client.naming.instance.api.deregister.description=Deregisters an instance from a specified service.
nacos.client.naming.instance.api.list.summary=List service instances
nacos.client.naming.instance.api.list.description=Retrieves the list of instances under a specific service. **Note:** As Nacos 3.X will deprecate UDP-based event pushing, clients unable to use gRPC long-polling connections should periodically poll instance lists through HTTP requests to stay synchronized with registry changes for service subscription purposes.

# ConfigOpenApiController
nacos.client.config.config.api.controller.name=Nacos Config HTTP Client APIs
nacos.client.config.config.api.controller.description=**HTTP Client APIs for Nacos Configuration Center, used for fetching configuration content. Note:** In Nacos 3.X, the HTTP Client APIs do `NOT` support configuration publishing or deletion. `Ordinary applications`, `microservices`, and `non-management/non-gateway applications` **should act as consumers** rather than publishers of configurations. For configuration publishing/deletion needs, use the **Admin APIs**.
nacos.client.config.config.api.get.summary=Get configuration content
nacos.client.config.config.api.get.description=Retrieves the content of a specific configuration. **Note:** Since Nacos 3.X will remove long-polling based configuration listening, clients should instead periodically call the `Get Configuration` API and compare MD5 checksums to detect and reload updated configurations.
